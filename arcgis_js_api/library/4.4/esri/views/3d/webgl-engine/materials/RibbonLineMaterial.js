// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.4/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/RibbonLineMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsRibbonLine"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\r\n\tuniform float extLineWidth;\r\n\tuniform float nearPlane;\r\n\r\n\tattribute vec3 $position;\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\r\n\tattribute vec4 $color;\r\n\tvarying vec4 vColor;\r\n\r\n\tattribute float size;\r\n\r\n#ifndef WALL\r\n\tuniform float miterLimit;\r\n\tattribute vec3 $auxpos1;\r\n\tattribute vec3 $auxpos2;\r\n#endif\r\n\r\n#ifdef SCREENSCALE\r\n\tuniform vec2 screenSize;\r\n\t$toScreenCoords\r\n#define VECTYPE vec2\r\n#define ZEROVEC vec2(0.0, 0.0)\r\n#define PERPENDICULAR(v) vec2(v.y, -v.x);\r\n#define ISOUTSIDE (left.x * right.y - left.y * right.x)*$uv0.y \x3e 0.0\r\n\r\n#else //ifdef SCREENSCALE\r\n\r\n#define VECTYPE vec3\r\n#define ZEROVEC vec3(0.0, 0.0, 0.0)\r\n// these macros are only valid for "strip" type lines:\r\n#define PERPENDICULAR(v) cross(up/*vec3(0.0, 1.0, 0.0)*/, v)\r\n#define ISOUTSIDE dot(cross(left, right), up/*vec3(0.0, 1.0, 0.0)*/)*$uv0.y \x3c 0.0\r\n\r\n#endif //ifdef SCREENSCALE\r\n\r\n\tfloat interp(float ncp, vec4 a, vec4 b) {\r\n\t\treturn (-ncp - a.z) / (b.z - a.z);\r\n\t}\r\n\r\n#ifdef SCREENSCALE\r\n\r\n  void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next) {\r\n\t\tfloat vnp \x3d nearPlane*0.99;\r\n\r\n\t\t//We have four vertices per point on the line. Start and end vertices\r\n\t\t//are treated differently --\x3e d \x3e 0, d \x3c 0\r\n\t\tfloat d \x3d abs($uv0.y) - 1.1;\r\n\r\n\t\t//current pos behind ncp --\x3e we need to clip\r\n\t\tif(pos.z \x3e -nearPlane) {\r\n\t\t\tif (d \x3c 0.0) {\r\n\t\t\t\t//previous in front of ncp\r\n\t\t\t\tif(prev.z \x3c -nearPlane) {\r\n\t\t\t\t\tpos \x3d mix(prev, pos, interp(vnp, prev, pos));\r\n\t\t\t\t\tnext \x3d pos;\r\n\t\t\t\t} else {\r\n\t\t\t\t  pos \x3d vec4(0, 0, 0, 1);\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t\t//next in front of ncp\r\n\t\t\tif(d \x3e 0.0) {\r\n\t\t\t\tif(next.z \x3c -nearPlane) {\r\n\t\t\t\t\tpos \x3d mix(pos, next, interp(vnp, pos, next));\r\n\t\t\t\t\tprev \x3d pos;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpos \x3d vec4(0, 0, 0, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\telse {\r\n\t\t\t//current position visible\r\n\t\t\t//previous behind ncp\r\n\t\t\tif (prev.z \x3e -nearPlane) {\r\n\t\t\t\tprev \x3d mix(pos, prev, interp(vnp, pos, prev));\r\n\t\t\t}\r\n\t\t\t//next behind ncp\r\n\t\t\tif (next.z \x3e -nearPlane) {\r\n\t\t\t\tnext \x3d mix(next, pos, interp(vnp, next, pos));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpos\x3d proj * pos;\r\n\t\tpos.xy *\x3d screenSize;\r\n\t\tpos /\x3d pos.w;\r\n\r\n\t\tnext \x3d proj * next;\r\n\t\tnext.xy *\x3d screenSize;\r\n\t\tnext /\x3d next.w;\r\n\r\n\t\tprev \x3d proj * prev;\r\n\t\tprev.xy *\x3d screenSize;\r\n\t\tprev /\x3d prev.w;\r\n  }\r\n\r\n#endif // SCREENSCALE\r\n\r\n\tvoid main(void) {\r\n\r\n\tfloat lineWidth \x3d extLineWidth + $size;\r\n\r\n#ifdef SCREENSCALE\r\n\r\n#if 0\r\n\t\tvec4 pos \x3d toScreenCoords($position.xyz);\r\n\t\tvec2 left \x3d (pos - toScreenCoords($auxpos1)).xy;\r\n\t\tvec2 right \x3d (toScreenCoords($auxpos2) - pos).xy;\r\n#else\r\n\t\tvec4 pos  \x3d view * vec4((model * vec4($position.xyz, 1.0)).xyz, 1.0);\r\n\t\tvec4 prev \x3d view * vec4((model * vec4($auxpos1.xyz, 1.0)).xyz, 1.0);\r\n\t\tvec4 next \x3d view * vec4((model * vec4($auxpos2.xyz, 1.0)).xyz, 1.0);\r\n\r\n\t\tclipAndTransform(pos, prev, next);\r\n\r\n\t\tvec2 left \x3d (pos - prev).xy;\r\n\t\tvec2 right \x3d (next - pos).xy;\r\n#endif\r\n\r\n#else // ifdef SCREENSCALE\r\n\t\tvec4 pos \x3d vec4($position, 1.0);\r\n#ifndef WALL\r\n\t\tvec3 left \x3d $position.xyz - $auxpos1;\r\n\t\tvec3 right \x3d $auxpos2 - $position.xyz;\r\n\t\tvec3 up \x3d normalize($position.xyz);\r\n#endif // ifndef WALL\r\n#endif // ifdef SCREENSCALE\r\n\r\n#ifdef WALL\r\n\t\tfloat displacementLen \x3d lineWidth;\r\n\t\tvec3 displacementDir \x3d normalize($position.xyz);//vec3(0.0, 1.0, 0.0);\r\n#else // ifdef WALL\r\n\r\n\t\tfloat leftLen \x3d length(left);\r\n\t\tleft \x3d (leftLen \x3e 0.001) ? left/leftLen : ZEROVEC;\r\n\r\n\t\tfloat rightLen \x3d length(right);\r\n\t\tright \x3d (rightLen \x3e 0.001) ? right/rightLen : ZEROVEC;\r\n\r\n\t\t// determine if vertex is on the "outside or "inside" of the join\r\n\t\tbool isOutside \x3d ISOUTSIDE;\r\n\r\n\t\t// compute miter join position first\r\n\t\tfloat displacementLen \x3d lineWidth;\r\n\t\tVECTYPE displacementDir \x3d normalize(left + right);\r\n\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\r\n\t\tif (leftLen \x3e 0.001 \x26\x26 rightLen \x3e 0.001) {\r\n\t\t\tfloat nDotSeg \x3d dot(displacementDir, left);\r\n\t\t\tdisplacementLen /\x3d length(nDotSeg*left - displacementDir);\r\n\r\n\t\t\t// limit displacement of inner vertices\r\n\t\t\tif (!isOutside)\r\n\t\t\t\tdisplacementLen \x3d min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\r\n\t\t}\r\n\r\n\t\tif (isOutside \x26\x26 (displacementLen \x3e miterLimit*lineWidth)) {\r\n\t\t\t// convert to bevel join if miterLimit is exceeded\r\n\t\t\tif (leftLen \x3c 0.001)\r\n\t\t\t    displacementDir \x3d right;\r\n\t\t\telse if (rightLen \x3c 0.001)\r\n\t\t\t\tdisplacementDir \x3d left;\r\n\t\t\telse\r\n\t\t\t\tdisplacementDir \x3d (abs($uv0.y) - 1.1 \x3c 0.0) ? left : right;\r\n\t\t\tdisplacementDir \x3d normalize(displacementDir);\r\n\t\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\r\n\t\t\tdisplacementLen \x3d lineWidth;\r\n\t\t}\r\n\r\n#endif // ifdef WALL\r\n\r\n#ifdef SCREENSCALE\r\n\t\tpos.xy +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\r\n\t\tpos.xy /\x3d screenSize;\r\n#else\r\n\t\tpos.xyz +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\r\n\t\tpos \x3d proj * view * model * pos;\r\n#endif\r\n\r\n\t\tvtc \x3d $uv0;\r\n\t\tvColor \x3d $color * 0.003921568627451; // \x3d 1/255\r\n\t\tgl_Position \x3d pos;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsRibbonLine"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n\tuniform vec4 eColor;\r\n\tvarying vec4 vColor;\r\n\tvarying vec2 vtc;\r\n\r\n\tvoid main() {\r\n\t\tgl_FragColor \x3d eColor * vColor;\r\n\t\t//gl_FragColor.a \x3d 1;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsRibbonLineHighlight"\x3e\x3c![CDATA[\r\n\t$fsprecisionf\r\n\r\n\tvoid main() {\r\n\t\tgl_FragColor \x3d vec4(1.0, 1.0, 1.0, 1.0);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("dojo/_base/lang dojo/text!./RibbonLineMaterial.xml ./internal/MaterialUtil ../lib/Util ../lib/gl-matrix ../lib/RenderSlot ../lib/ComponentUtils ../../../webgl/Program ../lib/DefaultVertexAttributeLocations ../lib/DefaultVertexBufferLayouts ../../../webgl/Util".split(" "),function(H,N,E,F,y,I,O,A,B,P,Q){var R=[255,255,255,255],S=[0,0,0,0],h=y.vec3d,J=y.vec2d,K=y.mat4d,n=h.create(),p=h.create(),r=h.create(),G=h.create(),C=J.create(),D=J.create(),L=h.create(),M=h.create();y=function(f,z){E.basicMaterialConstructor(this,
z);var g=F.VertexAttrConstants;f=f||{};f.color=f.color||[1,1,1,1];f.width=f.width||0;f.type=f.type||"screen";f.join=f.join||"miter";f.miterLimit="miter"===f.join?f.miterLimit||5:f.miterLimit;var k="wall"===f.type?2:4,a=P.Pos3Tex;"wall"!==f.type&&(a=[{name:"position",count:3,type:5126,offset:0,stride:64,normalized:!1},{name:"uv0",count:2,type:5126,offset:12,stride:64,normalized:!1},{name:"auxpos1",count:3,type:5126,offset:20,stride:64,normalized:!1},{name:"auxpos2",count:3,type:5126,offset:32,stride:64,
normalized:!1},{name:"color",count:4,type:5126,offset:44,stride:64,normalized:!1},{name:"size",count:1,type:5126,offset:60,stride:64,normalized:!1}]);this.canBeMerged=!1;this.getParams=function(){return f};this.getParameterValues=function(){var d={color:f.color,width:f.width,type:f.type,join:f.join,polygonOffset:f.polygonOffset};"miter"===f.join&&(d.miterLimit=f.miterLimit);return d};this.setParameterValues=function(d){for(var e in d)d.hasOwnProperty(e)&&(F.assert("type"!==e,"RibbonLineMaterial: type cannot be changed after creation"),
f[e]=d[e]);this.notifyDirty("matChanged")};this.dispose=function(){};this.getOutputAmount=function(d){return((d/2+1-2)*k+4)*Q.getStride(a)/4};this.getVertexBufferLayout=function(){return a};this.fillInterleaved=function(d,e,a,l,b,c){a=d.vertexAttr[g.POSITION].data;l=d.vertexAttr[g.COLOR]?d.vertexAttr[g.COLOR].data:R;var k=d.vertexAttr[g.SIZE]?d.vertexAttr[g.SIZE].data:S;(d=d.faces&&d.faces.indices&&d.faces.indices.position)&&d.length!=2*(a.length/3-1)&&console.warn("RibbonLineMaterial does not support indices");
if("wall"===f.type){l=c;k=a.length/3;c=0;d=a[0];for(var q=a[1],m=a[2],h,t,n,p=0;p<k;p++){var x=3*p;h=d;t=q;n=m;d=a[x];q=a[x+1];m=a[x+2];e&&(d=e[0]*d+e[4]*q+e[8]*m+e[12],q=e[1]*d+e[5]*q+e[9]*m+e[13],m=e[2]*d+e[6]*q+e[10]*m+e[14]);c+=Math.sqrt((d-h)*(d-h)+(q-t)*(q-t)+(m-n)*(m-n));b[l++]=d;b[l++]=q;b[l++]=m;b[l++]=c;b[l++]=-1;b[l++]=d;b[l++]=q;b[l++]=m;b[l++]=c;b[l++]=1}}else{d=a.length/3;q=a[0];m=a[1];h=a[2];t=0;e&&(q=e[0]*q+e[4]*m+e[8]*h+e[12],m=e[1]*q+e[5]*m+e[9]*h+e[13],h=e[2]*q+e[6]*m+e[10]*h+e[14]);
n=q;var p=m,x=h,u=a[3],v=a[4],w=a[5];e&&(u=e[0]*u+e[4]*v+e[8]*w+e[12],v=e[1]*u+e[5]*v+e[9]*w+e[13],w=e[2]*u+e[6]*v+e[10]*w+e[14]);for(var r=0;r<d;r++){var z=3*r;r<d-1&&(u=a[z+3],v=a[z+4],w=a[z+5],e&&(u=e[0]*u+e[4]*v+e[8]*w+e[12],v=e[1]*u+e[5]*v+e[9]*w+e[13],w=e[2]*u+e[6]*v+e[10]*w+e[14]));t+=Math.sqrt((n-q)*(n-q)+(p-m)*(p-m)+(x-h)*(x-h));b[c++]=n;b[c++]=p;b[c++]=x;b[c++]=t;b[c++]=0===r?-1.2:-1;b[c++]=q;b[c++]=m;b[c++]=h;b[c++]=u;b[c++]=v;b[c++]=w;b[c++]=l[0];b[c++]=l[1];b[c++]=l[2];b[c++]=l[3];b[c++]=
k[0];b[c++]=n;b[c++]=p;b[c++]=x;b[c++]=t;b[c++]=0===r?1.2:1;b[c++]=q;b[c++]=m;b[c++]=h;b[c++]=u;b[c++]=v;b[c++]=w;b[c++]=l[0];b[c++]=l[1];b[c++]=l[2];b[c++]=l[3];b[c++]=k[0];0<r&&r<d-1&&(b[c++]=n,b[c++]=p,b[c++]=x,b[c++]=t,b[c++]=-1.2,b[c++]=q,b[c++]=m,b[c++]=h,b[c++]=u,b[c++]=v,b[c++]=w,b[c++]=l[0],b[c++]=l[1],b[c++]=l[2],b[c++]=l[3],b[c++]=k[0],b[c++]=n,b[c++]=p,b[c++]=x,b[c++]=t,b[c++]=1.2,b[c++]=q,b[c++]=m,b[c++]=h,b[c++]=u,b[c++]=v,b[c++]=w,b[c++]=l[0],b[c++]=l[1],b[c++]=l[2],b[c++]=l[3],b[c++]=
k[0]);q=n;m=p;h=x;n=u;p=v;x=w}}};this.intersect=function(a,e,k,l,b,c,z){if(l.isSelection&&!O.isAllHidden(e.componentVisibilities,a.data.componentOffsets)){e=a.getData().getVertexAttr(g.position).position.data;a=a.getData().getVertexAttr(g.SIZE).size;a=(a&&a.data[0])+f.width;b=Number.MAX_VALUE;var d,m;c=l.camera;for(var y=l.point,t=0;t<e.length-5;t+=3){n[0]=e[t];n[1]=e[t+1];n[2]=e[t+2];K.multiplyVec3(k,n);p[0]=e[t+3];p[1]=e[t+4];p[2]=e[t+5];K.multiplyVec3(k,p);c.projectPoint(n,C);c.projectPoint(p,
D);if(0>C[2]&&0<D[2])h.subtract(n,p,r),d=c.frustumPlanes,m=-(h.dot(d[4],n)+d[4][3]),d=m/h.dot(r,d[4]),h.scale(r,d,r),h.add(n,r,n),c.projectPoint(n,C);else if(0<C[2]&&0>D[2])h.subtract(p,n,r),d=c.frustumPlanes,m=-(h.dot(d[4],p)+d[4][3]),d=m/h.dot(r,d[4]),h.scale(r,d,r),h.add(p,r,p),c.projectPoint(p,D);else if(0>C[2]&&0>D[2])continue;d=F.projectVectorVector2D(C,D,y);d<b&&(b=d,h.set(n,L),h.set(p,M))}k=l.p0;l=l.p1;b<a/2+4&&(e=F.linelineDistance3D(L,M,k,l),a=Number.MAX_VALUE,e[0]&&(h.subtract(e[2],k,G),
a=h.length(G)/h.dist(k,l)),z(a,G))}};this.getGLMaterials=function(){return{color:T,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:U}};this.getAllTextureIds=function(){return[]}};var T=function(f,h){E.basicGLMaterialConstructor(this,f);var g=H.clone(f.getParams());g.miterLimit="miter"===g.join?g.miterLimit:0;delete g.join;var k=h.get("ribbonLine_"+g.type);this.updateParameters=function(){var a=f.getParams();g.polygonOffset=a.polygonOffset;g.color=a.color;g.width=a.width;g.miterLimit="miter"===
a.join?a.miterLimit:0};this.beginSlot=function(a){return a===I.TRANSPARENT_MATERIAL};this.getProgram=function(){return k};this.bind=function(a,d){a.bindProgram(k);k.setUniform4fv("eColor",g.color);k.setUniform1f("miterLimit",g.miterLimit);k.setUniform1f("nearPlane",d.nearFar[0]);"screen"===g.type?(k.setUniform2fv("screenSize",[d.viewport[2],d.viewport[3]]),k.setUniform1f("extLineWidth",g.width*d.pixelRatio)):k.setUniform1f("extLineWidth",g.width);g.polygonOffset&&(a.setPolygonOffsetFillEnabled(!0),
a.setPolygonOffset(0,-4));a.setFaceCullingEnabled(!1);a.setBlendingEnabled(!0);a.setBlendFunctionSeparate(a.gl.SRC_ALPHA,a.gl.ONE_MINUS_SRC_ALPHA,a.gl.ONE,a.gl.ONE_MINUS_SRC_ALPHA);a.setDepthTestEnabled(!0);a.setDepthWriteEnabled(1<=g.color[3])};this.release=function(a){g.polygonOffset&&a.setPolygonOffsetFillEnabled(!1);a.setBlendingEnabled(!1);a.setDepthWriteEnabled(!0)};this.bindView=function(a,d){E.bindView(d.origin,d.view,k)};this.bindInstance=function(a,d){k.setUniformMatrix4fv("model",d.transformation)};
this.getDrawMode=function(a){return a.gl.TRIANGLE_STRIP}},U=function(f,h){E.basicGLMaterialConstructor(this,f);var g=H.clone(f.getParams());g.miterLimit="miter"===g.join?g.miterLimit:0;delete g.join;var k=h.get("ribbonLineHighlight_"+g.type);this.updateParameters=function(){var a=f.getParams();g.polygonOffset=a.polygonOffset;g.color=a.color;g.width=a.width;g.miterLimit="miter"===a.join?a.miterLimit:0};this.beginSlot=function(a){return a===I.OPAQUE_MATERIAL};this.getProgram=function(){return k};this.bind=
function(a,d){a.bindProgram(k);k.setUniform4fv("eColor",g.color);k.setUniform1f("miterLimit",g.miterLimit);k.setUniform1f("nearPlane",d.nearFar[0]);"screen"===g.type?(k.setUniform2fv("screenSize",[d.viewport[2],d.viewport[3]]),k.setUniform1f("extLineWidth",g.width*d.pixelRatio)):k.setUniform1f("extLineWidth",g.width);g.polygonOffset&&(a.setPolygonOffsetFillEnabled(!0),a.setPolygonOffset(0,-4));a.setFaceCullingEnabled(!1);a.setDepthTestEnabled(!0);a.setDepthWriteEnabled(1<=g.color[3])};this.release=
function(a){g.polygonOffset&&a.setPolygonOffsetFillEnabled(!1);a.setDepthWriteEnabled(!0)};this.bindView=function(a,d){E.bindView(d.origin,d.view,k)};this.bindInstance=function(a,d){k.setUniformMatrix4fv("model",d.transformation)};this.getDrawMode=function(a){return a.gl.TRIANGLE_STRIP}};y.loadShaders=function(f,h,g,k){f._parse(N);h=new A(k,f.vsRibbonLine,f.fsRibbonLine,B.Default3D,["SCREENSCALE"]);var a=new A(k,f.vsRibbonLine,f.fsRibbonLineHighlight,B.Default3D,["SCREENSCALE"]),d=new A(k,f.vsRibbonLine,
f.fsRibbonLine,B.Default3D),e=new A(k,f.vsRibbonLine,f.fsRibbonLineHighlight,B.Default3D),n=new A(k,f.vsRibbonLine,f.fsRibbonLine,B.Default3D,["WALL"]);f=new A(k,f.vsRibbonLine,f.fsRibbonLineHighlight,B.Default3D,["WALL"]);g.add("ribbonLine_screen",h);g.add("ribbonLineHighlight_screen",a);g.add("ribbonLine_strip",d);g.add("ribbonLineHighlight_strip",e);g.add("ribbonLine_wall",n);g.add("ribbonLineHighlight_wall",f)};return y});