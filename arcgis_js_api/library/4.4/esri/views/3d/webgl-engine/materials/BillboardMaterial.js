// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.4/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/BillboardMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderBillboard"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform mat4 modelNormal;\r\n\tattribute vec3 $position;\r\n\tattribute vec3 $normal;\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tconst float size \x3d 1.05;\r\n\r\n\tvoid main(void) {\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0);\r\n\t\tvec2 uv \x3d $uv0 - uv01;\r\n\t\tvec3 zDir \x3d normalize(-pos);\r\n\t\tvec3 xDir \x3d normalize(cross(vec3(.0, 1.0, .0), zDir));\r\n\t\tvec3 yDir \x3d cross(zDir, xDir);\r\n\t\tpos +\x3d xDir * (uv01.x - .5) * size;\r\n\t\tpos +\x3d yDir * (uv01.y - .5) * size;\r\n\t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n\t\tgl_Position \x3d pos4;\r\n\t\tvtc \x3d uv;\r\n\t\tvnormal \x3d normalize((modelNormal * vec4($normal, 1.0)).xyz);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderBillboard"\x3e\x3c![CDATA[\r\n\t$fsprecisionf\r\n\r\n\tuniform vec4 lightAmbient;\r\n\tuniform vec4 lightDiffuse;\r\n\tuniform vec3 lightDirection;\r\n\tuniform sampler2D tex;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\r\n\tvoid main() {\r\n\t\tvec4 texColor \x3d texture2D(tex, vtc);\r\n\t\tif (texColor.a \x3c .15) discard;\r\n\t\tgl_FragColor \x3d texColor;\r\n\t\tgl_FragColor.rgb *\x3d lightAmbient.rgb * lightAmbient.w + lightDiffuse.rgb * lightDiffuse.w * dot(lightDirection, vnormal);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderBillboardDepth"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform vec2 nearFar;\r\n\tattribute vec3 $position;\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying float depth;\r\n\tconst float size \x3d 1.05;\r\n\r\n\tvoid main(void) {\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0);\r\n\t\tvec2 uv \x3d $uv0 - uv01;\r\n\t\tpos.x +\x3d (uv01.x - .5) * size;\r\n\t\tpos.y +\x3d (uv01.y - .5) * size;\r\n\t\tvec4 eye \x3d vec4(pos, 1.0);\r\n\t\tgl_Position \x3d proj * eye;\r\n\t\tdepth \x3d (-eye.z - nearFar[0]) / (nearFar[1] - nearFar[0]);\r\n\t\tvtc \x3d uv;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("dojo/text!./BillboardMaterial.xml ./internal/MaterialUtil ../lib/RenderSlot ../../../webgl/Program ../lib/DefaultVertexAttributeLocations ../lib/DefaultVertexBufferLayouts ../../../webgl/Util".split(" "),function(w,m,q,n,r,x,y){var v=function(f,g){m.basicMaterialConstructor(this,g);var d=x.Pos3NormTex;this.getSize=function(){return 1.05};this.dispose=function(){};this.getTextureId=function(){return f};this.getOutputAmount=function(h){var k=y.getStride(d)/4;return h*k*6};this.getVertexBufferLayout=
function(){return d};this.fillInterleaved=function(h,k,a,e,c,b){e=m.fill;var f=h.faces.indices.va,g=h.vertexAttr.va.data,d=h.vertexAttr.tc4.data,n=h.vertexAttr.n0.data,r=h.vertexAttr.n1.data,q=h.vertexAttr.n2.data;h=h.vertexAttr.n3.data;for(var t=0;t<f.length;++t){var l=4*f[t],p=3*f[t];b+=e(g,l,c,b,k,3);b+=e(n,p,c,b,a,3);c[b++]=d[l];c[b++]=d[l+1];b+=e(g,l,c,b,k,3);b+=e(r,p,c,b,a,3);c[b++]=d[l+2]+1;c[b++]=d[l+1];b+=e(g,l,c,b,k,3);b+=e(q,p,c,b,a,3);c[b++]=d[l+2]+1;c[b++]=d[l+3]+1;b+=e(g,l,c,b,k,3);
b+=e(q,p,c,b,a,3);c[b++]=d[l+2]+1;c[b++]=d[l+3]+1;b+=e(g,l,c,b,k,3);b+=e(h,p,c,b,a,3);c[b++]=d[l];c[b++]=d[l+3]+1;b+=e(g,l,c,b,k,3);b+=e(n,p,c,b,a,3);c[b++]=d[l];c[b++]=d[l+1]}};this.intersect=function(){};this.getGLMaterials=function(){return{color:z,depthShadowMap:A,normal:void 0,depth:u,highlight:void 0}};this.getAllTextureIds=function(){return[f]}},z=function(f,g,d){m.basicGLMaterialConstructor(this,f);var h=q.TRANSPARENT_MATERIAL,k=g.get("billboard");m.singleTextureGLMaterialConstructor(this,
d,{textureId:f.getTextureId()});this.beginSlot=function(a){return h===a};this.getProgram=function(){return k};this.bind=function(a,e){a.bindProgram(k);this.bindTexture(a,k);a.setBlendingEnabled(!0);a.setBlendFunctionSeparate(a.gl.SRC_ALPHA,a.gl.ONE_MINUS_SRC_ALPHA,a.gl.ONE,a.gl.ONE_MINUS_SRC_ALPHA);a.setDepthTestEnabled(!0)};this.release=function(a){};this.bindView=function(a,e){m.bindView(e.origin,e.view,k)};this.bindInstance=function(a,e){k.setUniformMatrix4fv("model",e.transformation);k.setUniformMatrix4fv("modelNormal",
e.transformationNormal)};this.getDrawMode=function(a){return a.gl.TRIANGLES}},u=function(f,g,d,h){m.basicGLMaterialConstructor(this,f);var k=q.TRANSPARENT_MATERIAL,a=null==h?g.get("billboardDepth"):g.get("billboardDepthShadowMap");m.singleTextureGLMaterialConstructor(this,d,{textureId:f.getTextureId()});this.beginSlot=function(a){return k===a};this.getProgram=function(){return a};this.bind=function(e,c){e.bindProgram(a);this.bindTexture(e,a);a.setUniform2fv("nearFar",c.nearFar)};this.release=function(a){};
this.bindView=function(e,c){m.bindView(c.origin,c.view,a)};this.bindInstance=function(e,c){a.detUniformMatrix4fv("model",c.transformation)};this.getDrawMode=function(a){return a.gl.TRIANGLES}},A=function(f,g,d){u.call(this,f,g,d,!0)};v.loadShaders=function(f,g,d,h){f._parse(w);var k=new n(h,f.vertexShaderBillboard,f.fragmentShaderBillboard,r.Default3D),a=g.get("fsDepthTextured");g=g.get("fsDepthTexturedShadowMap");a=new n(h,f.vertexShaderBillboardDepth,a.source,r.Default3D,a.defines);f=new n(h,f.vertexShaderBillboardDepth,
g.source,r.Default3D,g.defines);d.add("billboard",k);d.add("billboardDepth",a);d.add("billboardDepthShadowMap",f)};return v});