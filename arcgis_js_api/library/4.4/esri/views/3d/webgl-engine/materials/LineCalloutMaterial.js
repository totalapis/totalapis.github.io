// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.4/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/LineCalloutMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderLineCallout"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  $commonAttributesAndUniformsHUD\r\n\r\n  attribute vec2 $uv0;\r\n\r\n  uniform float lineSize;\r\n  uniform vec2 pixelToNDC;\r\n  uniform float borderSize;\r\n  uniform vec2 screenOffset;\r\n\r\n  varying vec4 coverageSampling;\r\n  varying vec2 lineSizes;\r\n\r\n  $alignToPixelOrigin\r\n  $alignToPixelCenter\r\n\r\n  $projectPositionHUD\r\n\r\n  void main(void) {\r\n    ProjectHUDAux projectAux;\r\n    vec4 endPoint \x3d projectPositionHUD(projectAux);\r\n\r\n#ifdef OCCL_TEST\r\n    if (!testVisibilityHUD(endPoint)) {\r\n      gl_Position \x3d vec4(1e38, 1e38, 1e38, 1);\r\n    }\r\n    else {\r\n#endif\r\n\r\n#ifdef SCREEN_SIZE_PERSPECTIVE\r\n      vec4 perspectiveFactor \x3d screenSizePerspectiveScaleFactor(projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\r\n      vec2 screenOffsetScaled \x3d applyScreenSizePerspectiveScaleFactorFloat(screenOffset, perspectiveFactor);\r\n#else\r\n      vec2 screenOffsetScaled \x3d screenOffset;\r\n#endif\r\n\r\n      // Add view dependent polygon offset to get exact same original starting point. This is mostly\r\n      // used to get the correct depth value\r\n      vec3 posView \x3d (view * model * vec4($position, 1.0)).xyz;\r\n      applyHUDViewDependentPolygonOffset($auxpos1.w, projectAux.absCosAngle, posView);\r\n\r\n      vec4 startPoint \x3d proj * vec4(posView, 1);\r\n\r\n      // Apply screen offset to both start and end point\r\n      vec2 screenOffsetNorm \x3d screenOffsetScaled * 2.0 / viewport.zw;\r\n\r\n      startPoint.xy +\x3d screenOffsetNorm * startPoint.w;\r\n      endPoint.xy +\x3d screenOffsetNorm * endPoint.w;\r\n\r\n      // Align start and end to pixel origin\r\n      vec4 startAligned \x3d alignToPixelOrigin(startPoint, viewport.zw);\r\n      vec4 endAligned \x3d alignToPixelOrigin(endPoint, viewport.zw);\r\n\r\n#ifdef DEPTH_HUD\r\n\r\n#ifdef DEPTH_HUD_ALIGN_START\r\n      endAligned \x3d vec4(endAligned.xy / endAligned.w * startAligned.w, startAligned.zw);\r\n#else\r\n      startAligned \x3d vec4(startAligned.xy / startAligned.w * endAligned.w, endAligned.zw);\r\n#endif\r\n\r\n#endif\r\n\r\n      vec4 projectedPosition \x3d mix(startAligned, endAligned, $uv0.y);\r\n\r\n      // The direction of the line in screen space\r\n      vec2 screenSpaceDirection \x3d normalize(endAligned.xy / endAligned.w - startAligned.xy / startAligned.w);\r\n      vec2 perpendicularScreenSpaceDirection \x3d vec2(screenSpaceDirection.y, -screenSpaceDirection.x);\r\n\r\n#ifdef SCREEN_SIZE_PERSPECTIVE\r\n\r\n      float lineSizeScaled \x3d applyScreenSizePerspectiveScaleFactorFloat(lineSize, perspectiveFactor);\r\n      float borderSizeScaled \x3d applyScreenSizePerspectiveScaleFactorFloat(borderSize, perspectiveFactor);\r\n\r\n#else\r\n\r\n      float lineSizeScaled \x3d lineSize;\r\n      float borderSizeScaled \x3d borderSize;\r\n\r\n#endif\r\n\r\n      float halfPixelSize \x3d lineSizeScaled * 0.5;\r\n\r\n      // Calculate a pixel offset from the edge of the pixel, s.t. we keep the line aligned\r\n      // to pixels if it has a full pixel size. Since pixel aligned biases to the bottom-left,\r\n      // we bias the size to the right (for odd sizes) to balance out the bias. Grow sub-pixel\r\n      // sizes towards the left or right s.t. there is a smooth transition (e.g. from 2 to 3 px).\r\n      float halfWholePixelSize \x3d floor(lineSizeScaled) * 0.5;\r\n      float halfPixelSizeInt \x3d floor(halfWholePixelSize);\r\n\r\n      // Sub-pixel offset if we need to grow sub-pixels to the left\r\n      float subpixelOffset \x3d -fract(lineSizeScaled) * float(halfWholePixelSize \x3e 0.0);\r\n\r\n      // Pixel offset aligning to whole pixels and adding subpixel offset if needed\r\n      float pixelOffset \x3d -halfPixelSizeInt + subpixelOffset;\r\n\r\n      // Compute full ndc offset, adding 1px padding for doing anti-aliasing and the border size\r\n      float padding \x3d 1.0 + borderSizeScaled;\r\n      vec2 ndcOffset \x3d (pixelOffset - padding + $uv0 * (lineSizeScaled + padding + padding)) * pixelToNDC;\r\n\r\n      // Offset x/y from the center of the line in screen space\r\n      projectedPosition.xy +\x3d perpendicularScreenSpaceDirection * ndcOffset * projectedPosition.w;\r\n\r\n      // Compute a coverage varying which we can use in the fragment shader to determine\r\n      // how much a pixel is actually covered by the line (i.e. to anti alias the line).\r\n      // This works by computing two coordinates that can be linearly interpolated and then\r\n      // subtracted to find out how far away from the line edge we are.\r\n      float edgeDirection \x3d ($uv0.x * 2.0 - 1.0);\r\n\r\n      float halfBorderSize \x3d 0.5 * borderSizeScaled;\r\n      float halfPixelSizeAndBorder \x3d halfPixelSize + halfBorderSize;\r\n      float outerEdgeCoverageSampler \x3d edgeDirection * (halfPixelSizeAndBorder + halfBorderSize + 1.0);\r\n\r\n      float isOneSided \x3d float(lineSizeScaled \x3c 2.0 \x26\x26 borderSize \x3c 2.0);\r\n\r\n      coverageSampling \x3d vec4(\r\n        // Edge coordinate\r\n        outerEdgeCoverageSampler,\r\n\r\n        // Border edge coordinate\r\n        outerEdgeCoverageSampler - halfPixelSizeAndBorder * isOneSided,\r\n\r\n        // Line offset\r\n        halfPixelSize - 0.5,\r\n\r\n        // Border offset\r\n        halfBorderSize - 0.5 + halfPixelSizeAndBorder * (1.0 - isOneSided)\r\n      );\r\n\r\n      lineSizes \x3d vec2(lineSizeScaled, borderSizeScaled);\r\n\r\n      gl_Position \x3d projectedPosition;\r\n\r\n#ifdef OCCL_TEST\r\n    }\r\n#endif\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet\x3e\x3c![CDATA[\r\n\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderLineCallout"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n  uniform vec4 color;\r\n  uniform vec4 borderColor;\r\n\r\n  varying vec4 coverageSampling;\r\n  varying vec2 lineSizes;\r\n\r\n  void main() {\r\n    // Mix between line and border coverage offsets depending on whether we need\r\n    // a border (based on the sidedness).\r\n    vec2 coverage \x3d min(1.0 - clamp(abs(coverageSampling.xy) - coverageSampling.zw, 0.0, 1.0), lineSizes);\r\n\r\n    // Mix between border and line color based on the line coverage (conceptually the line\r\n    // blends on top of the border background).\r\n    //\r\n    // Anti-alias by blending final result using the full (including optional border) coverage\r\n    // and the color alpha\r\n    float borderAlpha \x3d color.a * borderColor.a * coverage.y;\r\n    float colorAlpha \x3d color.a * coverage.x;\r\n\r\n    float finalAlpha \x3d mix(borderAlpha, 1.0, colorAlpha);\r\n\r\n#ifdef DEPTH_HUD\r\n\r\n    if (finalAlpha \x3c 0.01) {\r\n      discard;\r\n    }\r\n\r\n#else\r\n\r\n    // Compute the finalRgb, but keep it pre-multiplied (for unpre-multiplied you\r\n    // need to divide by finalAlpha). We avoid the division here by setting the\r\n    // appropriate blending function in the material.\r\n    vec3 finalRgb \x3d mix(borderColor.rgb * borderAlpha, color.rgb, colorAlpha);\r\n\r\n    gl_FragColor \x3d vec4(finalRgb, finalAlpha);\r\n\r\n#endif\r\n\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("require exports ../../../../core/tsSupport/extendsHelper dojo/text!./LineCalloutMaterial.xml ./internal/MaterialUtil ../lib/Util ../../../webgl/Util ./internal/MaterialBase ./internal/GLMaterialBase ../lib/RenderSlot ../lib/ShaderVariations".split(" "),function(m,C,n,t,f,u,p,v,w,q,x){function r(e,b,a){3===a.length?e.setUniform4f(b,a[0],a[1],a[2],1):e.setUniform4fv(b,a)}var g=u.VertexAttrConstants,l=[{name:"position",count:3,type:5126,offset:0,stride:48,normalized:!1},{name:"normal",count:3,
type:5126,offset:12,stride:48,normalized:!1},{name:"uv0",count:2,type:5126,offset:24,stride:48,normalized:!1},{name:"auxpos1",count:4,type:5126,offset:32,stride:48,normalized:!1}],y={verticalOffset:null,screenSizePerspective:null,screenOffset:[0,0],color:[0,0,0,1],size:1,borderColor:null,occlusionTest:!1,shaderPolygonOffset:1E-5,depthHUDAlignStart:!1,centerOffsetUnits:"world"};m=function(e){function b(a,c){c=e.call(this,c)||this;c.params=f.copyParameters(a,y);c._uniqueMaterialIdentifier=b.uniqueMaterialIdentifier(c.params);
return c}n(b,e);Object.defineProperty(b.prototype,"uniqueMaterialIdentifier",{get:function(){return this._uniqueMaterialIdentifier},enumerable:!0,configurable:!0});b.prototype.dispose=function(){};b.prototype.getGLMaterials=function(){return{color:z,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:void 0}};b.prototype.getAllTextureIds=function(){return[]};b.prototype.fillAttributeData=function(a,c,b,d,k,e){var h=a.faces.indices[c];a=a.vertexAttr[c].data;if(h&&a)for(c=b+p.findAttribute(l,
c).offset/4,b=0;b<h.length;b++)for(var A=d*h[b],g=0;6>g;g++)f.fill(a,A,e,c,k,d),c+=12};b.prototype.fillInterleaved=function(a,c,b,d,k,e,f){this.fillAttributeData(a,g.POSITION,e,3,c,k);this.fillAttributeData(a,g.NORMAL,e,3,b,k);this.fillAttributeData(a,g.AUXPOS1,e,4,null,k);a=e+p.findAttribute(l,g.UV0).offset/4;c=0;for(b=B;c<b.length;c++)d=b[c],k[a+0]=d[0],k[a+1]=d[1],a+=12};b.prototype.getOutputAmount=function(a){return 288*a};b.prototype.getInstanceBufferLayout=function(){};b.prototype.getVertexBufferLayout=
function(){return l};b.prototype.intersect=function(a,c,b,d,e,f,g,l){};b.prototype.getParameterValues=function(){var a=this.params;return{verticalOffset:a.verticalOffset,screenSizePerspective:a.screenSizePerspective,screenOffset:a.screenOffset,centerOffsetUnits:a.centerOffsetUnits,color:[a.color[0],a.color[1],a.color[2],a.color[3]],size:a.size,borderColor:a.borderColor,occlusionTest:a.occlusionTest,shaderPolygonOffset:a.shaderPolygonOffset,depthHUDAlignStart:a.depthHUDAlignStart}};b.prototype.setParameterValues=
function(a){var c=!1,h;for(h in a){var d=a[h];void 0!==d&&(c=!0,Array.isArray(d)?this.params[h]=d.slice():this.params[h]=d)}c&&(this._uniqueMaterialIdentifier=b.uniqueMaterialIdentifier(this.params),this.notifyDirty("matChanged"))};b.uniqueMaterialIdentifier=function(a){return JSON.stringify({screenOffset:a.screenOffset||[0,0],centerOffsetUnits:a.centerOffsetUnits||"world"})};b.loadShaders=function(a,c,b,d){a._parse(t);a=new x("lineCallout",["vertexShaderLineCallout","fragmentShaderLineCallout"],
null,b,c,a,d);a.addDefine("occlTest","OCCL_TEST");a.addDefine("verticalOffset","VERTICAL_OFFSET");a.addDefine("screenSizePerspective","SCREEN_SIZE_PERSPECTIVE");a.addDefine("depthHud","DEPTH_HUD");a.addDefine("depthHudAlignStart","DEPTH_HUD_ALIGN_START");a.addDefine("centerOffsetUnitsScreen","CENTER_OFFSET_UNITS_SCREEN");b.addShaderVariations("line-callout-material-shader-variations",a)};return b}(v.MaterialBase);var z=function(e){function b(a,c,b){a=e.call(this,a,c,b)||this;a.isRenderSlot=!0;a.programRep=
c;a.updateParameters();return a}n(b,e);b.prototype.updateParameters=function(){this.params=this.material.getParameterValues();this.selectProgram()};b.prototype.selectProgram=function(){var a=this.params;this.renderProgram=this.programRep.getShaderVariationsProgram("line-callout-material-shader-variations",[!!a.occlusionTest,!!a.verticalOffset,!!a.screenSizePerspective,!1,!!a.depthHUDAlignStart,"screen"===a.centerOffsetUnits]);this.depthProgram=this.programRep.getShaderVariationsProgram("line-callout-material-shader-variations",
[!!a.occlusionTest,!!a.verticalOffset,!!a.screenSizePerspective,!0,!!a.depthHUDAlignStart,"screen"===a.centerOffsetUnits])};b.prototype.beginSlot=function(a){switch(a){case q.LINE_CALLOUTS:return this.isRenderSlot=!0;case q.LINE_CALLOUTS_HUD_DEPTH:return this.isRenderSlot=!1,!0}return!1};Object.defineProperty(b.prototype,"program",{get:function(){return this.isRenderSlot?this.renderProgram:this.depthProgram},enumerable:!0,configurable:!0});b.prototype.getAllPrograms=function(){return[this.renderProgram,
this.depthProgram]};b.prototype.getProgram=function(){return this.program};b.prototype.getDrawMode=function(a){return a.gl.TRIANGLES};b.prototype.bind=function(a,c){var b=c.cameraAboveGround?1:-1,d=this.program,e=this.params;a.bindProgram(d);d.setUniform1f("cameraGroundRelative",b);d.setUniform1f("polygonOffset",e.shaderPolygonOffset);d.setUniform4fv("viewport",c.viewport);d.setUniformMatrix4fv("viewNormal",c.viewInvTransp);d.setUniform1i("hudVisibilityTexture",0);a.bindTexture(c.hudVisibilityTexture,
0);r(d,"color",e.color);d.setUniform2f("screenOffset",e.screenOffset[0],e.screenOffset[1]);this.bindBorder(a,c);f.bindVerticalOffset(e.verticalOffset,c,d);this.bindSizing(a,c);f.bindScreenSizePerspective(e.screenSizePerspective,d);this.isRenderSlot?this.bindRender(a,c):this.bindHUDDepth(a,c)};b.prototype.bindRender=function(a,b){a.setBlendFunctionSeparate(1,771,770,771);a.setBlendingEnabled(!0);a.setDepthWriteEnabled(!1)};b.prototype.bindHUDDepth=function(a,b){a.setColorMask(!1,!1,!1,!1);a.setDepthWriteEnabled(!0);
a.setBlendingEnabled(!1);a.setDepthTestEnabled(!0)};b.prototype.bindView=function(a,b){a=this.program;f.bindView(b.origin,b.view,a);f.bindCamPos(b.origin,b.viewInvTransp,a)};b.prototype.bindInstance=function(a,b){a=this.program;a.setUniformMatrix4fv("model",b.transformation);a.setUniformMatrix4fv("modelNormal",b.transformationNormal)};b.prototype.release=function(a,b){this.isRenderSlot?this.releaseRender(a,b):this.releaseHUDDepth(a,b)};b.prototype.releaseRender=function(a,b){a.setBlendingEnabled(!1);
a.setBlendFunction(770,771);a.setDepthWriteEnabled(!0)};b.prototype.releaseHUDDepth=function(a,b){a.setColorMask(!0,!0,!0,!0)};b.prototype.bindSizing=function(a,b){a=this.program;var c=this.params;a.setUniform2f("pixelToNDC",2/b.viewport[2],2/b.viewport[3]);a.setUniform1f("lineSize",Math.ceil(c.size))};b.prototype.bindBorder=function(a,b){a=this.program;b=this.params;null!==b.borderColor?(r(a,"borderColor",b.borderColor),a.setUniform1f("borderSize",1)):(a.setUniform4f("borderColor",0,0,0,0),a.setUniform1f("borderSize",
0))};return b}(w.GLMaterialBase),B=[[0,0],[1,0],[0,1],[1,0],[1,1],[0,1]];return m});