<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="calculateVerticalOffset"><![CDATA[
  $viewingMode

#ifdef VERTICAL_OFFSET
  // [ verticalOffsetPerDistance, minWorldLength, maxWorldLength ]
  uniform vec4 verticalOffset;

#ifdef SCREEN_SIZE_PERSPECTIVE

  uniform vec4 screenSizePerspectiveAlignment;

  $screenSizePerspective

#endif

  vec3 calculateVerticalOffset(vec3 worldPos, vec3 localOrigin) {
    float viewDistance = length((view * vec4(worldPos, 1)).xyz);
    float verticalOffsetOffsetDistance = verticalOffset.x * viewDistance;

#ifdef VIEWING_MODE_GLOBAL
    vec3 worldNormal = normalize(worldPos + localOrigin);
#else
    vec3 worldNormal = vec3(0, 0, 1);
#endif

#ifdef SCREEN_SIZE_PERSPECTIVE
    float cosAngle = dot(worldNormal, normalize(worldPos - camPos));

    float verticalOffsetScreenHeight = screenSizePerspectiveScaleFloat(verticalOffset.x, abs(cosAngle), viewDistance, screenSizePerspectiveAlignment);
#else
    float verticalOffsetScreenHeight = verticalOffset.x;
#endif

    // Screen sized offset in world space, used for example for line callouts
    float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * viewDistance, verticalOffset.z, verticalOffset.w);

    return worldNormal * worldOffset;
  }
#endif
]]>
</snippet>

<snippet name="vsPhongSrc"><![CDATA[
	uniform mat4 proj;
	uniform mat4 view;
  uniform vec3 camPos;

	uniform vec3 localOrigin;

#ifdef INSTANCED
    attribute mat4 model;
    attribute mat4 modelNormal;
#else
	uniform mat4 model;
	uniform mat4 modelNormal;
#endif
#ifdef INSTANCEDCOLOR
	attribute vec4 instanceColor;
#endif
	attribute vec3 $position;
	attribute vec3 $normal;
	varying vec3 vpos;
	varying vec3 vnormal;

#ifdef VERTEXCOLORS
	attribute vec4 $color;
#endif

#ifdef SYMBOLVERTEXCOLORS
  attribute vec4 $symbolColor;
#endif

#if defined(VV_SIZE) || defined(VV_COLOR)
	attribute vec4 instanceFeatureAttribute;
#endif

$vvUniforms

#if defined(VERTEXCOLORS)
	varying vec4 vcolor;
#endif

#if defined(INSTANCEDCOLOR) || defined(VV_COLOR) || defined(SYMBOLVERTEXCOLORS)
	uniform vec4 externalColor;
	varying vec4 vcolorExt;
#endif

#if defined(SYMBOLVERTEXCOLORS)
	varying mediump float colorMixMode; // varying int is not supported in WebGL
#endif

	$vvFunctions

	$colorMixMode

  $calculateVerticalOffset

	void main(void) {

#ifdef VV_CUSTOM_MODEL_MATRIX

		vpos = (model * vvTransformPosition($position, instanceFeatureAttribute)).xyz;
		vnormal = normalize((modelNormal * vvTransformNormal($normal, instanceFeatureAttribute)).xyz);

#ifdef VERTICAL_OFFSET
		vec3 centerPos = (model * vvTransformPosition(vec3(0, 0, 0), instanceFeatureAttribute)).xyz;
#endif

#else /* VV_CUSTOM_MODEL_MATRIX */

		vpos = (model * vec4($position, 1.0)).xyz;
		vnormal = normalize((modelNormal * vec4($normal, 1.0)).xyz);

#ifdef VERTICAL_OFFSET
		vec3 centerPos = (model * vec4(vec3(0, 0, 0), 1.0)).xyz;
#endif

#endif /* VV_CUSTOM_MODEL_MATRIX */

#ifdef VERTICAL_OFFSET
    vpos += calculateVerticalOffset(centerPos, localOrigin);
#endif

		gl_Position = proj * view * vec4(vpos, 1.0);

#ifdef VERTEXCOLORS
		vcolor = $color * 0.003921568627451; // = 1/255
#endif

#if defined(INSTANCEDCOLOR) || defined(VV_COLOR) || defined(SYMBOLVERTEXCOLORS)
		vcolorExt = externalColor;
#endif
#ifdef INSTANCEDCOLOR
		vcolorExt *= instanceColor;
#endif
#ifdef VV_COLOR
		vcolorExt *= vvGetColor(instanceFeatureAttribute, vvColorValues, vvColorColors);
#endif
#ifdef SYMBOLVERTEXCOLORS
    int symbolColorMixMode;
    vcolorExt *= decodeSymbolColor(symbolColor, symbolColorMixMode) * 0.003921568627451; // = 1/255;
    colorMixMode = float(symbolColorMixMode) + 0.5; // add 0.5 to avoid interpolation artifacts
#endif
]]></snippet>

<snippet name="fsPhongSrc"><![CDATA[
  $fsprecisionf

	uniform vec3 camPos;
	uniform vec3 localOrigin;

	$sceneLightingDefinitions

	// material parameters
	//////////////////////////////////////////
	uniform vec3 ambient;
	uniform vec3 diffuse;
	uniform vec3 specular;
	uniform float shininess;
	uniform float opacity;
	uniform float layerOpacity;

#ifdef SYMBOLVERTEXCOLORS
	varying mediump float colorMixMode; // varying int is not supported in WebGL
#else
  uniform int colorMixMode;
#endif

#ifdef RECEIVE_SHADOWS
	uniform sampler2D depthTex;
	uniform int shadowMapNum;
	uniform vec4 shadowMapDistance;
	uniform mat4 shadowMapMatrix[4];
	uniform float depthHalfPixelSz;
#endif

#ifdef RECEIVE_SSAO
	uniform sampler2D ssaoTex;
	uniform vec4 viewportPixelSz;
#endif


	varying vec3 vpos;
	varying vec3 vnormal;
#if defined(VERTEXCOLORS)
	varying vec4 vcolor;
#endif
#if defined(INSTANCEDCOLOR) || defined(VV_COLOR) || defined(SYMBOLVERTEXCOLORS)
	varying vec4 vcolorExt;
#else
	uniform vec4 externalColor;
#endif

#ifdef RECEIVE_SHADOWS
	$evalShadow
#endif

	$colorMixMode

	void main() {
		vec3 viewDir = normalize(vpos - camPos);

		// compute normal
		#ifndef DOUBLESIDED
				vec3 normal = vnormal;
		#else
				vec3 normal = dot(vnormal, viewDir)>0.0 ? -vnormal : vnormal;
		#endif
		normal = normalize(normal);

		vec3 reflDir = normalize(reflect(viewDir, normal));

		// compute ssao
		#ifdef RECEIVE_SSAO
				float ssao = texture2D(ssaoTex, (gl_FragCoord.xy - viewportPixelSz.xy) * viewportPixelSz.zw).a;
				ssao = viewportPixelSz.z < 0.0 ? 1.0 : ssao;
		#else
				float ssao = 1.0;
		#endif

		// At global scale we create some additional ambient light based on the main light to simulate global illumination
		// This also defines "additionalAmbientScale" which might be used as a shadow fallback further down
		$sceneLightingAdditionalLightGlobal

		// compute shadowing
		float shadow = 0.0;
		#ifdef RECEIVE_SHADOWS
			shadow = evalShadow(vpos, 1.0 / gl_FragCoord.w, depthTex, shadowMapNum, shadowMapDistance, shadowMapMatrix, depthHalfPixelSz);
		#elif defined(VIEWING_MODE_GLOBAL)
			// at global scale (and in global scenes) we fall back to this approximation
			// to shadow objects on the dark side of the earth
			shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);
		#endif


]]></snippet>

<snippet name="externalColorMix"><![CDATA[
	vec3 matColor = max(ambient, diffuse); // combine the old material parameters into a single one
	#if defined(VERTEXCOLORS) && (defined(INSTANCEDCOLOR) || defined(VV_COLOR) || defined(SYMBOLVERTEXCOLORS))
			// Internal colors: varying vcolor + uniform ambient/diffuse, external colors: varying vcolorExt
			vec3 albedo_ = mixExternalColor(vcolor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
			float opacity_ = layerOpacity * mixExternalOpacity(vcolor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));
	#elif defined(VERTEXCOLORS)
			// Internal colors: varying vcolor + uniform ambient/diffuse, external colors: uniform externalColor
			vec3 albedo_ = mixExternalColor(vcolor.rgb * matColor, texColor.rgb, externalColor.rgb, int(colorMixMode));
			float opacity_ = layerOpacity * mixExternalOpacity(vcolor.a * opacity, texColor.a, externalColor.a, int(colorMixMode));
	#elif defined(INSTANCEDCOLOR) || defined(VV_COLOR) || defined(SYMBOLVERTEXCOLORS)
			// Internal colors: uniform ambient/diffuse, external colors: varying vcolorExt
			vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
			float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));
	#else
			// Internal colors: uniform ambient/diffuse, external colors: uniform externalColor
			vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, externalColor.rgb, int(colorMixMode));
			float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, externalColor.a, int(colorMixMode));
	#endif
	albedo_+= 0.25 * specular; // don't completely ignore specular for now
]]></snippet>

<snippet name="vsPhong"><![CDATA[
  $vsprecisionf

	$vsPhongSrc
	}
]]></snippet>

<snippet name="fsPhong"><![CDATA[
		$fsprecisionf

		$fsPhongSrc

		vec4 texColor = vec4(1,1,1,1);
		$externalColorMix

		$selectShadingNormal

		vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo_, shadow, 1.0 - ssao, additionalLight);
		gl_FragColor = vec4(shadedColor, opacity_);
	}
]]></snippet>

<snippet name="vsPhongTextured"><![CDATA[
  $vsprecisionf

	attribute vec2 $uv0;
	varying vec2 vtc;
	$vsPhongSrc
#ifndef FLIPV
		vtc = $uv0;
#else
		vtc = vec2($uv0.x, 1.0-$uv0.y);
#endif

	}
]]></snippet>

<snippet name="fsPhongTextured"><![CDATA[
	$fsprecisionf

	uniform sampler2D tex;
	varying vec2 vtc;

	$fsPhongSrc

		// read texture color
		vec4 texColor = texture2D(tex, vtc);
		if (texColor.a < .33) discard;

		$externalColorMix

		$selectShadingNormal

		vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo_, shadow, 1.0 - ssao, additionalLight);

		gl_FragColor = vec4(shadedColor, opacity_);
	}
]]></snippet>

<snippet name="vsPhongAtlasTextured"><![CDATA[
  $vsprecisionf

	attribute vec4 $uv0;
	attribute vec4 $region;
	varying vec2 vtc;
	varying vec4 regionV;
	$vsPhongSrc
#ifndef FLIPV
		vtc = $uv0.xy;
#else
		vtc = vec2($uv0.x, 1.0-$uv0.y);
#endif
		regionV = $region/65535.0;
	}
]]></snippet>

<snippet name="fsPhongAtlasTextured"><![CDATA[
	$fsprecisionf

	uniform sampler2D tex;
	uniform vec2 texSize;
	varying vec2 vtc;
	varying vec4 regionV;

	float calcMipMapLevel(const vec2 ddx, const vec2 ddy) {
		// from:
		//   - OpenGLES Common Profile Specification Version 2.0.25, Section 3.7.7 - Texture Minification
		//   - https://www.opengl.org/discussion_boards/showthread.php/171485-Texture-LOD-calculation-(useful-for-atlasing)
		//   - http://www.linedef.com/virtual-texture-demo.html
		float deltaMaxSqr = max(dot(ddx, ddx), dot(ddy, ddy));
		return max(0.5 * log2(deltaMaxSqr), 0.0);
	}

	$fsPhongSrc

		vec2 uv = vtc;
		uv = fract(uv);
		//[umin, vmin, umax, vmax]

		vec2 atlasScale = regionV.zw - regionV.xy;
		uv = uv.xy * atlasScale + regionV.xy;

		vec4 texColor;
		#ifdef GL_OES_standard_derivatives
			#extension GL_OES_standard_derivatives : enable

			// calculate derivative of continuous texture coordinate
			// to avoid mipmapping artifacts caused by manual wrapping in shader
			vec2 dUVdx = dFdx(vtc) * atlasScale;
			vec2 dUVdy = dFdy(vtc) * atlasScale;

			#ifdef GL_EXT_shader_texture_lod
				#extension GL_EXT_shader_texture_lod : enable

				// workaround for artifacts in Windows 10 using Intel HD Graphics 4000 series
				// see: https://devtopia.esri.com/Zurich-R-D-Center/arcgis-js-api-canvas3d-issues/issues/768
				const float epsilon = 1.0E-32;
				float zeroUVShift = uv.x == 0.0 && uv.y == 0.0 ? epsilon : 0.0;

				texColor = texture2DGradEXT(tex, uv + zeroUVShift, dUVdx, dUVdy);
			#else
				// use bias to compensate for difference in automatic vs desired mipmap level
				vec2 dUVdxAuto = dFdx(uv);
				vec2 dUVdyAuto = dFdy(uv);
				float mipMapLevel = calcMipMapLevel(dUVdx * texSize, dUVdy * texSize);
				float autoMipMapLevel = calcMipMapLevel(dUVdxAuto * texSize, dUVdyAuto * texSize);
				texColor = texture2D(tex, uv, mipMapLevel - autoMipMapLevel);
			#endif
		#else
			texColor = texture2D(tex, uv);
		#endif

		if (texColor.a < .33) discard;

		$externalColorMix

		$selectShadingNormal

		vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo_, shadow, 1.0 - ssao, additionalLight);
		gl_FragColor = vec4(shadedColor, opacity_);
	}
	]]></snippet>

	<snippet name="fsPhongTexturedRefl"><![CDATA[
		$fsprecisionf

		uniform sampler2D tex;
		uniform sampler2D reflTex;
		uniform float reflectivity;
		varying vec2 vtc;

		$normal2envTC

		$fsPhongSrc
		vec4 texColor = texture2D(tex, vtc);
		if (texColor.a < .33) discard;
		vec4 reflColor = texture2D(reflTex, normal2envTC(reflDir));

		$externalColorMix

		$selectShadingNormal

		vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo_, shadow, 1.0 - ssao, additionalLight);
		shadedColor.rgb = mix(shadedColor.rgb, reflColor.rgb, reflectivity);

		gl_FragColor = vec4(shadedColor, opacity_);
	}
]]></snippet>

<snippet name="vsDepthSrc"><![CDATA[
	uniform mat4 proj;
	uniform mat4 view;
  uniform vec3 camPos;
  uniform vec3 localOrigin;

#ifdef INSTANCED
	attribute mat4 model;
  attribute mat4 modelNormal;
#else
	uniform mat4 model;
  uniform mat4 modelNormal;
#endif
	uniform vec2 nearFar;
	attribute vec3 $position;
	varying float depth;

	$vvUniforms
#if defined(VV_CUSTOM_MODEL_MATRIX)
	attribute vec4 instanceFeatureAttribute;
#endif
	$vvFunctions

  $calculateVerticalOffset

	void main(void) {

#ifdef VV_CUSTOM_MODEL_MATRIX

    vec3 vpos = (model * vvTransformPosition($position, instanceFeatureAttribute)).xyz;

#ifdef VERTICAL_OFFSET
    vec3 centerPos = (model * vvTransformPosition(vec3(0, 0, 0), instanceFeatureAttribute)).xyz;
#endif

#else /* VV_CUSTOM_MODEL_MATRIX */

		vec3 vpos = (model * vec4($position, 1.0)).xyz;

#ifdef VERTICAL_OFFSET
		vec3 centerPos = (model * vec4(vec3(0, 0, 0), 1.0)).xyz;
#endif

#endif /* VV_CUSTOM_MODEL_MATRIX */

#ifdef VERTICAL_OFFSET
    vpos += calculateVerticalOffset(centerPos, localOrigin);
#endif

    vec4 eye = view * vec4(vpos, 1);

		gl_Position = proj * eye;
		depth = (-eye.z - nearFar[0]) / (nearFar[1] - nearFar[0]) ;
]]></snippet>

<snippet name="vsDepth"><![CDATA[
  $vsprecisionf

	$vsDepthSrc
	}
]]></snippet>

<snippet name="vsDepthTextured"><![CDATA[
  $vsprecisionf

	attribute vec2 $uv0;
	varying vec2 vtc;
	$vsDepthSrc
#ifndef FLIPV
        vtc = $uv0;
#else
        vtc = vec2($uv0.x, 1.0-$uv0.y);
#endif
	}
]]></snippet>

<snippet name="vsNormalSrc"><![CDATA[
	uniform mat4 proj;
	uniform mat4 view;
  uniform vec3 camPos;
  uniform vec3 localOrigin;

#ifdef INSTANCED
	attribute mat4 model;
	attribute mat4 modelNormal;
#else
	uniform mat4 model;
	uniform mat4 modelNormal;
#endif
	uniform mat4 viewNormal;
	attribute vec3 $position;
	attribute vec3 $normal;
	varying vec3 vnormal;

	$vvUniforms
#if defined(VV_CUSTOM_MODEL_MATRIX)
	attribute vec4 instanceFeatureAttribute;
#endif
	$vvFunctions

  $calculateVerticalOffset

	void main(void) {

#ifdef VV_CUSTOM_MODEL_MATRIX

    vec3 vpos = (model * vvTransformPosition($position, instanceFeatureAttribute)).xyz;
		vnormal = normalize((viewNormal * modelNormal * vvTransformNormal($normal, instanceFeatureAttribute)).xyz);

#ifdef VERTICAL_OFFSET
    vec3 centerPos = (model * vvTransformPosition(vec3(0, 0, 0), instanceFeatureAttribute)).xyz;
#endif

#else /* VV_CUSTOM_MODEL_MATRIX */
		vec3 vpos = (model * vec4($position, 1.0)).xyz;
		vnormal = normalize((viewNormal * modelNormal * vec4($normal, 1.0)).xyz);

#ifdef VERTICAL_OFFSET
    vec3 centerPos = (model * vec4(vec3(0, 0, 0), 1.0)).xyz;
#endif

#endif /* VV_CUSTOM_MODEL_MATRIX */

#ifdef VERTICAL_OFFSET
    vpos += calculateVerticalOffset(centerPos, localOrigin);
#endif

    gl_Position = proj * view * vec4(vpos, 1);
]]></snippet>

<snippet name="vsNormal"><![CDATA[
  $vsprecisionf

	$vsNormalSrc
	}
]]></snippet>

<snippet name="vsNormalTextured"><![CDATA[
  $vsprecisionf

	attribute vec2 $uv0;
	varying vec2 vtc;
	$vsNormalSrc
#ifndef FLIPV
		vtc = $uv0;
#else
		vtc = vec2($uv0.x, 1.0-$uv0.y);
#endif
	}
]]></snippet>

<snippet name="vsHighlightSrc"><![CDATA[
  $vsprecisionf

	uniform mat4 proj;
	uniform mat4 view;
  uniform vec3 camPos;
  uniform vec3 localOrigin;

#ifdef INSTANCED
	attribute mat4 model;
  attribute mat4 modelNormal;
#else
	uniform mat4 model;
  uniform mat4 modelNormal;
#endif
	attribute vec3 $position;

	$vvUniforms
#if defined(VV_CUSTOM_MODEL_MATRIX)
	attribute vec4 instanceFeatureAttribute;
#endif
	$vvFunctions

  $calculateVerticalOffset

	void main(void) {

#ifdef VV_CUSTOM_MODEL_MATRIX

    vec3 vpos = (model * vvTransformPosition($position, instanceFeatureAttribute)).xyz;

#ifdef VERTICAL_OFFSET
    vec3 centerPos = (model * vvTransformPosition(vec3(0, 0, 0), instanceFeatureAttribute)).xyz;
#endif

#else /* VV_CUSTOM_MODEL_MATRIX */

    vec3 vpos = (model * vec4($position, 1.0)).xyz;

#ifdef VERTICAL_OFFSET
    vec3 centerPos = (model * vec4(vec3(0, 0, 0), 1.0)).xyz;
#endif

#endif /* VV_CUSTOM_MODEL_MATRIX */

#ifdef VERTICAL_OFFSET
    vpos += calculateVerticalOffset(centerPos, localOrigin);
#endif

		gl_Position = proj * view * vec4(vpos, 1);
]]></snippet>

<snippet name="vsHighlight"><![CDATA[
	$vsHighlightSrc
	}
]]></snippet>

<snippet name="vsHighlightTextured"><![CDATA[
  $vsprecisionf

	attribute vec2 $uv0;
	varying vec2 vtc;
	$vsHighlightSrc
#ifndef FLIPV
		vtc = $uv0;
#else
		vtc = vec2($uv0.x, 1.0-$uv0.y);
#endif
	}
]]></snippet>

<snippet name="fsDepthSrc"><![CDATA[
  $fsprecisionf
	varying float depth;

	void main() {
]]></snippet>

<snippet name="fsDepth"><![CDATA[
	$fsprecisionf

	$calcFragDepth
	$float2rgba
	$fsDepthSrc
#ifndef BIAS_SHADOWMAP
		gl_FragColor = float2rgba(depth);
#else
		gl_FragColor = float2rgba(calcFragDepth(depth));
#endif
	}
]]></snippet>

<snippet name="fsDepthTextured"><![CDATA[
	$fsprecisionf

	uniform sampler2D tex;
	varying vec2 vtc;
	$calcFragDepth
	$float2rgba

	$fsDepthSrc
		if (texture2D(tex, vtc).a < .33) discard;
#ifndef BIAS_SHADOWMAP
		gl_FragColor = float2rgba(depth);
#else
		gl_FragColor = float2rgba(calcFragDepth(depth));
#endif
	}
]]></snippet>

<snippet name="fsNormal"><![CDATA[
	$fsprecisionf

	varying vec3 vnormal;
	void main() {
		vec3 normal = normalize(vnormal);
		if (gl_FrontFacing == false) normal = -normal;

#ifndef ALPHA_ZERO
		gl_FragColor = vec4(vec3(.5) + .5 * normal, 1.0);
#else
		gl_FragColor = vec4(vec3(.5) + .5 * normal, 0.0);
#endif

	}
]]></snippet>

<snippet name="fsNormalTextured"><![CDATA[
	$fsprecisionf

	varying vec3 vnormal;
	varying vec2 vtc;
	uniform sampler2D tex;
	void main() {
		if (texture2D(tex, vtc).a < .33) discard;
		vec3 normal = normalize(vnormal);
		if (gl_FrontFacing == false) normal = -normal;
#ifndef ALPHA_ZERO
		gl_FragColor = vec4(vec3(.5) + .5 * normal, 1.0);
#else
		gl_FragColor = vec4(vec3(.5) + .5 * normal, 0.0);
#endif
	}
]]></snippet>

<snippet name="fsHighlight"><![CDATA[
	$fsprecisionf
  uniform sampler2D depthTex;
  uniform vec4 highlightViewportPixelSz;

	void main() {
		$highlightWrite
	}
]]></snippet>

<snippet name="fsHighlightTextured"><![CDATA[
	$fsprecisionf

	varying vec2 vtc;
	uniform sampler2D tex;
  uniform sampler2D depthTex;
  uniform vec4 highlightViewportPixelSz;

	void main() {
		if (texture2D(tex, vtc).a < .33) discard;

		$highlightWrite
	}
]]></snippet>

</snippets>
